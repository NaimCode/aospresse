generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String   @unique
  email     String?
  image     String?
  password  String
  isActif   Boolean  @default(true)
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  color       String?
  icon        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[]
}

model Adherent {
  id                   String        @id @default(cuid())
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  num                  Int           @unique @default(autoincrement())
  name                 String
  sexe                 Sexe?
  dateNaissance        String?
  lieuNaissance        String?
  familyStatus         FamilyStatus?
  childrenNumber       Int?
  address              String?
  tel                  String?
  email                String?
  profession           String?
  lieuTravail          String?
  cin                  String?
  identifiant          String?
  identifiant2         String?
  anneeTravail         String?
  ville                String?
  sifa                 Sifa?
  isPaid               Boolean       @default(false)
  dateDebutAbonnement  String?
  dateNouvelAbonnement String?
  photoId              String?
  relations            Relation[]
}

model Service {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  activite    String
  description String?
  forChild    Boolean    @default(false)
  categoryId  String
  relations   Relation[]
  category    Category   @relation(fields: [categoryId], references: [id])

  @@index([categoryId], map: "Service_categoryId_fkey")
}

model Relation {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  montant     String
  description String?
  adherentId  String
  date        String?
  serviceId   String
  adherent    Adherent @relation(fields: [adherentId], references: [id], onDelete: Cascade)
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([adherentId, serviceId])
  @@index([serviceId], map: "Relation_serviceId_fkey")
}

enum Sifa {
  A
  P
}

enum FamilyStatus {
  C
  M
  D
  V
}

enum Sexe {
  M
  F
}
