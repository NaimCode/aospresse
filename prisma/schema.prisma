// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String   @unique
  email     String?
  image     String?
  password  String
  isActif   Boolean  @default(true)
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  color       String?
  icon        String?

  services Service[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Adherent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  num       Int @unique @default(autoincrement())
  //
  name          String 
  sexe          Sexe?

  dateNaissance String?
  lieuNaissance String?
  familyStatus FamilyStatus?
  childrenNumber      Int?
   address String?
  tel String?

  email        String?
  profession   String?
  lieuTravail  String?
  cin          String?
  identifiant  String?
  identifiant2 String?
  anneeTravail String?

  ville String?

  sifa        Sifa?
  isPaid Boolean @default(false)

  dateDebutAbonnement  String?
  dateNouvelAbonnement String?

  photoId String?


  relations Relation[]
}

model Service {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

 activite String
 description String?
 forChild Boolean @default(false)
 categoryId String
 category   Category @relation(fields: [categoryId], references: [id])
relations Relation[]
}

model Relation{
    id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  montant String
  description String?
  adherentId String
  adherent Adherent @relation(fields: [adherentId], references: [id],onDelete: Cascade)

  serviceId String
  service Service @relation(fields: [serviceId], references: [id],onDelete: Cascade)
  @@unique([adherentId, serviceId])
}


enum Sifa{
  A
  P
}
enum FamilyStatus {
  C
  M
  D
  V
}

enum Sexe {
  M
  F
}
